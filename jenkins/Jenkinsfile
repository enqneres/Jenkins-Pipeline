pipeline {
    agent any
    environment {
        SONAR_QUBE_URL = 'http://localhost:9000'
        SONAR_QUBE_TOKEN = 'a89290d663c883a6d0b566c6c65f9fd8125fc6bf'
    }
    stages {
        stage('Build') {
            steps {
                dir('jenkins') {
                    sh 'mvn clean package'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SONAR_LOCAL') {
                    sh "${tool 'SONAR_SCANER'}/bin/sonar-scanner -Dsonar.projectKey=Backend -Dsonar.host.url=${env.SONAR_QUBE_URL} -Dsonar.login=${env.SONAR_QUBE_TOKEN} -Dsonar.java.binaries=./"
                }
            }
        }
        stage('Quality Gate') {
            steps {
                sleep(10)
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dockerapp = docker.build("enoqueneres94/jenkins-api:${env.BUILD_ID}", '-f jenkins/Dockerfile jenkins/')
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        dockerapp.push('v1')
                        dockerapp.push("${env.BUILD_ID}")
                    }
                }
            }
        }
        stage('Deploy k8s') {
            environment {
                tag_version = "${env.BUILD_ID}"
            }
            steps {
                dir('jenkins/k8s') {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        sh "sed -i 's/{{TAG}}/${tag_version}/g' deployment.yaml"
                        sh 'kubectl apply -f deployment.yaml'
                    }
                }
            }
        }
    }
}
